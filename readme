

User input: You will need to handle user input to move and rotate the Tetriminos.{Tetriminos are the shapes used in the game of Tetris. They are composed of four blocks arranged in different configurations, and there are seven different types of Tetriminos, each with a distinct shape and color. The seven Tetriminos are:
                                                                                  
                                                I-Tetrimino: a long, thin shape composed of four blocks.
                                                                                  J-Tetrimino: a shape that looks like a mirror image of an "L," composed of three blocks in an L-shape and one block attached to the bottom of the L.
                                                                                  L-Tetrimino: a shape that looks like an "L," composed of three blocks in an L-shape and one block attached to the top of the L.
                                                                                  O-Tetrimino: a square shape composed of four blocks.
                                                                                  S-Tetrimino: a shape composed of two blocks in an S-shape and two blocks in a reverse S-shape.
                                                                                  T-Tetrimino: a shape that looks like a "T," composed of three blocks in a T-shape and one block attached to the bottom of the T.
                                                                                  Z-Tetrimino: a shape composed of two blocks in a Z-shape and two blocks in a reverse Z-shape.
                                                                                  In Tetris, the Tetriminos fall from the top of the screen and the player must rotate and move them to fit them into the game board below. If a row of blocks is completely filled, it is cleared, and the player earns points. The goal is to clear as many rows as possible and prevent the Tetriminos from reaching the top of the screen, which would end the game.}

Graphics and animation: You will need to create or source graphics and animations for the game, including the Tetriminos, game board, and background elements.

Collision detection: You will need to implement collision detection between the Tetriminos and the game board, as well as between the Tetriminos themselves.

Game logic: You will need to code the game's logic, including how the Tetriminos fall, how lines are cleared, and when the game ends.

Scoring: You will need to create a scoring system that tracks the number of lines cleared and calculates the player's score.

Audio: You can use a library such as SDL_mixer or SFML Audio to add sound effects and music to the game.





Choose a shape: A tetramino can be made up of four blocks arranged in different shapes. You can choose from the seven classic shapes: I, O, T, S, Z, J, and L.

Define the color: Each tetramino can have a different color. You can choose a color that is distinctive and easy to recognize.

Set the initial position: You need to set the initial position of the tetramino on the game board. This position will change as the tetramino moves.

Define the rotation logic: Tetraminos can be rotated 90 degrees clockwise or counterclockwise. You need to define the logic for how the tetramino rotates so that it remains within the game board.

Create the blocks: Create four blocks that make up the tetramino. Each block should have the same color as the tetramino and be positioned according to the shape of the tetramino.

Draw the tetramino: Finally, draw the tetramino on the game board by drawing each of the four blocks that make it up


DATA DICTIONARY

BLOCK_SIZE: a static constant integer representing the size of each block in the tetramino.
NUM_BLOCKS: a static constant integer representing the number of blocks in the tetramino.

Tetramino(): a constructor that takes an array of integers representing the shape of the tetramino, a color, and x and y coordinates of its position on the game board.

draw(): a member function that takes a reference to a RenderWindow object and draws the tetramino on the window.

move(): a member function that takes two integers representing the x and y offset of the movement and moves the tetramino by that offset.

rotate(): a member function that takes a boolean value to determine whether to rotate the tetramino clockwise or counterclockwise and rotates the tetramino accordingly.

m_shape: an array of integers representing the shape of the tetramino.

m_color: an sf::Color object representing the color of the tetramino.

m_x: an integer representing the x coordinate of the tetramino's position on the game board.

m_y: an integer representing the y coordinate of the tetramino's position on the game board.

m_block: an sf::RectangleShape object representing a single block of the tetramino.

m_blocks: a vector of sf::RectangleShape objects representing all the blocks of the tetramino.





const int BOARD_WIDTH = 10;
const int BOARD_HEIGHT = 20;

BOARD_WIDTH and BOARD_HEIGHT should be declared as constants or variables to represent the dimensions of the game board. For example:

These constants could be used in several places throughout your code, such as:

To define the size of the game window
To define the size of the game board
To check if a tetromino is out of bounds
To calculate the position of a tetromino on the game board
To initialize the game board as a 2D array with the correct dimensions



Variables:

board: an instance of the Board class used to manage the game board
window: an instance of the RenderWindow class representing the game window
currentTetramino: a pointer to an instance of a Tetramino class representing the currently active tetramino
clock: an instance of the Clock class used to measure time elapsed between tetramino movements
Functions:

getRandomTetramino(color, x, y, board): a function that returns a pointer to a randomly
selected tetramino instance, taking in parameters for the tetramino's color, starting x and y position,
and the game board it will be placed on
main(): the main function of the program, responsible for handling events, moving the tetramino,
 drawing it on the game board, and managing the game loop.


 No, they are not the same.

 m_blockOffsets is a vector of sf::Vector2i objects that represent the offset positions of each block relative to the tetramino's pivot point.

 m_blocks is a vector of sf::RectangleShape objects that represent the visual blocks of the tetramino that will be drawn on the game board.

 In other words, m_blockOffsets is used to calculate the position of each block in the tetramino, while m_blocks is used to draw the tetramino on the screen.



 Alternative 1 - Tetris

 5% Window with gameloop
 20% Square piece drops down and stops when it should
 15% Pieces can be moved
 10% Pieces are random from all standard Tetris pieces
 10% Pieces can be rotated //it have to fix the block rotate
 10% Lines clear when filled
 10% Scoring system
 5% Music and sound effects (min. 3 sounds)


 10% Two player mode with win condition
 10% Play with gamepad
 5% UML diagram of your main classes (at least 3)
